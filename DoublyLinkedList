class Node(object):
    def __init__(self,value):
        self.value=value
        self.next=None
        self.prev=None

    def __str__(self):
        return f"<=| {self.value} |=>"

class DoubleLinkedList(object):
    def __init__(self,value):
        new_node=Node(value)
        self.head=new_node
        self.tail=new_node
        new_node.next=None
        new_node.prev=None
        self.length=1

    def append(self,value):
        new_node=Node(value)
        new_node.prev=self.tail
        self.tail.next=new_node
        self.tail=new_node
        self.length+=1

    def prepend(self,value):
        new_node=Node(value)
        new_node.next=self.head
        self.head.prev=new_node
        self.head=new_node
        self.length+=1

    def traverse(self):
        current_node=self.head
        print(current_node.value)
        for _ in range(self.length-1):
            current_node=current_node.next
            print(current_node.value)

    def search(self,value):
        current_node=self.head
        index=0
        if current_node.value==value:
            print(index)
        else:
            for _ in range(self.length-1):
                current_node=current_node.next
                index+=1
                if current_node.value==value:
                    print(index)

    def get(self,index):
        if index<0 or index>=(self.length-1):
            print("Index out of range..")
        else:
            current_node=self.head
            for _ in range(index):
                current_node=current_node.next
            print(current_node.value)

    def set(self,value,index):
        current_node=self.head
        if index < 0 or index >= (self.length - 1):
            print("Index out of range..")
        else:
            for _ in range(index):
                current_node=current_node.next
            current_node.value=value

    def insert(self,value,index):
        current_node=self.head
        new_node=Node(value)
        if index==0:
            self.prepend(value)
        else:
            for _ in range(index-1):
                current_node=current_node.next
            new_node.next=current_node.next
            current_node.next.prev=new_node
            current_node.next=new_node
            new_node.prev=current_node
        self.length+=1

    def popFirst(self):
        if self.length==1:
            self.head=None
            self.tail=None
            self.length=0
        else:
            current_node = self.head
            self.head=current_node.next
            self.head.prev=None
            current_node=None
            self.length-=1

    def pop(self):
        current_node=self.tail
        self.tail=current_node.prev
        self.tail.next=None
        current_node=None
        self.length-=1

    def remove(self,index):
        if self.length==1:
            self.head=None
            self.tail=None
            self.length=0
        if index==0:
            return self.popFirst()
        else:
            prev_node=self.head
            current_node=prev_node.next
            for _ in range(index-1):
                prev_node=prev_node.next
                current_node=prev_node.next
            prev_node.next=current_node.next
            current_node.next.prev=prev_node
            current_node=None
            self.length-=1

    def reversetraverse(self):
        dummy_node=Node(-1)
        self.tail.next=dummy_node
        dummy_node.prev=self.tail
        current_node=dummy_node
        for _ in range(self.length):
            current_node=current_node.prev
            print(current_node.value)

    def getprevious(self,index):
        prev_node=self.head
        curent_node=prev_node.next
        if index==0:
            print("no previous node")
        if index>=self.length or index<0:
            print("index out of range")
        else:
            for _ in range(index-1):
                prev_node=prev_node.next
                curent_node=prev_node.next
            print(prev_node)

    def __str__(self):
        current_node=self.head
        result=f"{None}"+f"{current_node}"
        if self.head==None:
            return f"<=| {self.head} |=>"
        if self.length==1:
            print(current_node)
        else:
            for _ in range(self.length):
                current_node=current_node.next
                result= result +f"{current_node}"
        return result



doublylinkedlist=DoubleLinkedList(20)
print(doublylinkedlist)
doublylinkedlist.append(25)
print(doublylinkedlist)
doublylinkedlist.append(30)
doublylinkedlist.append(35)
doublylinkedlist.append(40)
print(doublylinkedlist)
doublylinkedlist.prepend(56)
doublylinkedlist.prepend(11)
print(doublylinkedlist)
doublylinkedlist.traverse()
doublylinkedlist.search(11)
doublylinkedlist.search(40)
doublylinkedlist.get(6)
doublylinkedlist.get(0)
doublylinkedlist.get(3)
doublylinkedlist.set(101,2)
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.insert(1996,3)
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.popFirst()
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.pop()
print(doublylinkedlist)
doublylinkedlist.remove(3)
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.remove(0)
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.getprevious(0)
doublylinkedlist.getprevious(3)
print(doublylinkedlist)
doublylinkedlist.append(19)
doublylinkedlist.append(36)
doublylinkedlist.insert(1947,3)
print(doublylinkedlist)
doublylinkedlist.pop()
print(doublylinkedlist)
print(doublylinkedlist.length)
doublylinkedlist.reversetraverse()
