class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            self.head.next = self.head
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head

    def print_list(self):
        nodes = []
        temp = self.head
        while temp:
            nodes.append(str(temp.data))
            temp = temp.next
            if temp == self.head:
                break
        print(" -> ".join(nodes))

    def is_sorted(self):
        if self.head is None:
            return True
        else:
            current_node=self.head
            while current_node.next is not self.head:
                if current_node.next.data>current_node.data:
                    pass
                else:
                    return False
                current_node=current_node.next
            return True



customCSL=CircularLinkedList()
customCSL.append(1)
customCSL.append(2)
customCSL.append(3)
customCSL.append(4)
customCSL.append(5)
customCSL.append(6)
print(customCSL)
print(customCSL.is_sorted())

