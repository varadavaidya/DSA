class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
    
    def __str__(self):
        return str(self.value)

class CSLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
    
    def __str__(self):
        temp_node = self.head
        result = ''
        while temp_node is not None:
            result += str(temp_node.value)
            temp_node = temp_node.next
            if temp_node == self.head:  # Stop condition for circular list
                break
            result += ' -> '
        return result
    
    def append(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
            new_node.next = new_node
        else:
            self.tail.next = new_node
            new_node.next = self.head
            self.tail = new_node
        self.length += 1
    
    def delete_by_value(self, value):
        dummy_node=self.tail
        current_node=self.head
        if current_node==None:
            return None 
        if current_node.value==value:
            self.tail.next=current_node.next
            self.head=current_node.next
            current_node=None
            self.length-=1
            return True
        else:
            while current_node:
                dummy_node=dummy_node.next
                current_node=current_node.next
                if current_node.value==value:
                    if current_node==self.tail:
                        dummy_node.next=self.head
                        self.tail=dummy_node
                        self.length-=1
                        break
                    else:
                        dummy_node.next=current_node.next
                        self.length-=1
                        break
            return True
