class Node(object):
    def __init__(self,value):
        self.value=value
        self.next=None

class Queue(object):
    def __init__(self,maxSize):
        self.head=None
        self.tail=None
        self.maxSize=maxSize
        self.length=0

    def enqueue(self,value):
        new_node=Node(value)
        if self.length<self.maxSize:
            if self.length==0:
                self.head=new_node
                self.tail=new_node
                self.length+=1
            else:
                current_node=self.head
                for _ in range(self.length-1):
                    current_node=current_node.next
                current_node.next=new_node
                self.tail=new_node
                self.length+=1
        else:
            print("Queue is full")

    def dequeue(self):
        current_node=self.head
        self.head=current_node.next
        current_node=None
        self.length-=1

    def isEmpty(self):
        if self.length==0:
            return True
        else:
            return False

    def isFull(self):
        if self.length==self.maxSize:
            return True
        else:
            return False

    def peek(self):
        return self.head.value

    def delete(self):
        self.head=None
        self.tail=None
        self.length=0


    def __str__(self):
        current_node=self.head
        result=''
        for _ in range(self.length):
            result= result + "\n ^ "+f"\n {current_node.value}"
            current_node=current_node.next
        return result






custom_queue=Queue(3)
print(custom_queue.isEmpty())
print(custom_queue.isFull())
custom_queue.enqueue(10)
custom_queue.enqueue(20)
custom_queue.enqueue(30)
print(custom_queue)
print(custom_queue.isEmpty())
print(custom_queue.isFull())
custom_queue.enqueue(40)
custom_queue.enqueue(50)
print(custom_queue)
print(custom_queue.length)
custom_queue.dequeue()
print(custom_queue)
print(custom_queue.peek())
