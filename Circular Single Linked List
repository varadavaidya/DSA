class Node(object):
    def __init__(self,value):
        self.value=value
        self.next=None

class CSLinkedList(object):
    def __init__(self,value):
        new_node=Node(value)
        new_node.next=new_node
        self.head=new_node
        self.tail=new_node
        self.length = 1

    def append(self,value):
        if self.head is None:
            new_node=Node(value)
            self.head=new_node
            self.tail=new_node
            new_node.next=new_node
            self.length = 1
        else:
            new_node=Node(value)
            current_node=self.head
            for _ in range(self.length-1):
                current_node=current_node.next
            current_node.next=new_node
            self.tail=new_node
            new_node.next=self.head
            self.length+=1

    def prepend(self,value):
        if self.length==0:
            new_node=Node(value)
            self.head=new_node
            self.tail=new_node
            new_node.next=new_node
            self.length =1
        else:
            new_node=Node(value)
            new_node.next=self.head
            self.head=new_node
            self.tail.next=new_node
            self.length+=1

    def insert(self,value,index):
        new_node=Node(value)
        if index==0:
            new_node.next=self.head
            self.head=new_node
            self.tail.next=new_node
            self.length+=1
        else:
            prev_node=self.head
            post_node=self.head.next
            for _ in range(index-1):
                prev_node=post_node
                post_node=post_node.next
            prev_node.next=new_node
            new_node.next=post_node
            self.length+=1

    def traverse(self):
        current_node=self.head
        for _ in range(self.length):
            print(current_node.value)
            current_node=current_node.next

    def search(self,value):
        current_node=self.head
        index=0
        if current_node.value==value:
            return index
        for _ in range(self.length):
            current_node=current_node.next
            index+=1
            if current_node.value==value:
                return index

    def get(self,index):
        current_node=self.head
        if index==0:
            print(current_node.value)
        for _ in range(index):
            current_node=current_node.next
            print(current_node.value)

    def set(self,value,index):
        current_node=self.head
        if index==0:
            current_node.value=value
        for _ in range(index):
            current_node=current_node.next
        current_node.value=value

    def popfirst(self):
        current_node=self.head
        self.tail.next=current_node.next
        self.head=current_node.next
        current_node=None
        self.length-=1

    def pop(self):
        if self.length==0:
            print("Nothing to pop")
        if self.length==1:
            self.head=None
            self.tail=None
            self.length-=1
        else:
            current_node=self.head
            for _ in range(self.length-2):
                current_node=current_node.next
            current_node.next=self.head
            self.tail=current_node
            self.length-=1

    def remove(self,index):
        if index>=self.length or index<0:
            print("index out of range")
        else:
            prev_node=self.head
            current_node=prev_node.next
            if index==0:
                self.tail.next=prev_node.next
                self.head=prev_node.next
                prev_node=None
                self.length-=1
            for _ in range(index-1):
                prev_node=prev_node.next
                current_node=current_node.next
            prev_node.next=current_node.next
            current_node=None
            self.length-=1

    def delete(self):
        self.head.naxt=self.tail
        self.head=None
        self.tail=None
        self.length=0

    def __str__(self):
        current_node=self.head
        result=''
        for _ in range(self.length):
            if current_node is self.head:
                result= f" {current_node.value} "
            elif current_node is not self.tail:
                result= result + " ---> " + f" {current_node.value} "
            else:
                result= result + "--->"+  f" {current_node.value} " + " V "+" \n ^^" + f" {(self.length+1)*" <---- "}"
            current_node=current_node.next
        return result


cslinkedlist=CSLinkedList(10)
print(cslinkedlist.head.value)
print(cslinkedlist.length)
cslinkedlist.append(20)
cslinkedlist.append(30)
cslinkedlist.append(40)
cslinkedlist.append(50)
print(cslinkedlist)
print(cslinkedlist.length)
cslinkedlist.prepend(60)
print(cslinkedlist)
print(cslinkedlist.length)
cslinkedlist.prepend(70)
print(cslinkedlist)
print(cslinkedlist.length)
cslinkedlist.insert(55,3)
print(cslinkedlist)
cslinkedlist.traverse()
print(cslinkedlist.search(20))
print(cslinkedlist.search(50))
print(cslinkedlist.search(70))
cslinkedlist.get(0)
cslinkedlist.get(7)
cslinkedlist.get(4)
cslinkedlist.set(23,0)
cslinkedlist.set(99,7)
print(cslinkedlist)
cslinkedlist.popfirst()
print(cslinkedlist)
cslinkedlist.popfirst()
print(cslinkedlist)
cslinkedlist.pop()
print(cslinkedlist)
cslinkedlist2=CSLinkedList(20)
cslinkedlist2.append(30)
print(cslinkedlist2)
cslinkedlist2.pop()
print(cslinkedlist2)
print(cslinkedlist)
cslinkedlist.remove(1)
print(cslinkedlist)
cslinkedlist.remove(9)
cslinkedlist.remove(-2)
cslinkedlist.append(33)
cslinkedlist.append(1)
print(cslinkedlist)
cslinkedlist.insert(29,3)
print(cslinkedlist)
cslinkedlist.delete()
print(cslinkedlist.length)
print(cslinkedlist)


