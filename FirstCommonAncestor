from collections import deque

class Node:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.right = right
        self.left = left

def findParent(root,childNodeValue):
    if root.value== childNodeValue:
        return
    if root is None:
        return
    else:
        queue=deque()
        queue.append(root)
        while queue:
            current_node=queue.popleft()
            if current_node.left is not None:
                if current_node.left.value==childNodeValue:
                    return current_node
            if current_node.right is not None:
                if current_node.right.value==childNodeValue:
                    return current_node
            if current_node.left is not None:
                if current_node.left.value!=childNodeValue:
                    if current_node.left is not None:
                        queue.append(current_node.left)
            if current_node.right is not None:
                if current_node.right.value!=childNodeValue:
                    if current_node.right is not None:
                        queue.append(current_node.right)



'''def depth(root):
    if root is None:
        return 0
    return max(depth(root.left),depth(root.right))+1'''

def level(root,nodeValue):
    if root.value==nodeValue:
        return 1
    current_node=findParent(root,nodeValue)
    return 1+level(root,current_node.value)


def findFirstCommonAncestor(n1, n2, root):
    n1_parent=findParent(root,n1)
    n2_parent=findParent(root,n2)
    if n1_parent.value == n2_parent.value:
        return n1_parent
    else:
        if level(root,n1)<level(root,n2):
            return findFirstCommonAncestor(n1,n2_parent.value,root)
        if level(root,n1)>level(root,n2):
            return findFirstCommonAncestor(n1_parent.value,n2,root)
        if level(root,n1)==level(root,n2):
            if findParent(root,n1).value!=findParent(root,n2):
                return findFirstCommonAncestor(n1_parent.value,n2_parent.value,root)

root=Node(55)
root.left=Node(44)
root.right=Node(77)
root.left.right=Node(99)
root.left.left=Node(22)
root.left.right.left=Node(90)
root.left.right.left.right=Node(33)
root.left.right.right=Node(95)
root.left.left.left=Node(35)
root.left.left.right=Node(88)
root.left.left.right.left=Node(54)

print(findFirstCommonAncestor(95,35,root).value)
