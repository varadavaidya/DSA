# Binary Search Tree
from collections import deque

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None
    
    def insert(self,data):
           if(self.root==None):
                  self.root=Node(data)
           else:
                  self._insert(data,self.root)
    def _insert(self, data, curNode):
           if(curNode.data>data):
                  if(curNode.left==None):
                         curNode.left=Node(data)

                  else:
                         self._insert(data,curNode.left)
           else:
                   if(curNode.right==None):
                         curNode.right=Node(data)
                   else:
                         self._insert(data,curNode.right)
    def depthFirstSearchPreOrder(self, rootNode, data):
        queue=deque()
        queue.append(rootNode)
        while queue:
            current_node=queue.popleft()
            if current_node.data not in data:
                data.append(current_node.data)
            if current_node.left is not None:
                data+(self.depthFirstSearchPreOrder(current_node.left,data))
            if current_node.right is not None:
                data+(self.depthFirstSearchPreOrder(current_node.right,data))
            if current_node.left is not None:
                queue.append(current_node.left)
            if current_node.right is not None:
                queue.append(current_node.right)
        return data
