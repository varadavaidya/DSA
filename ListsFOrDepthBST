from collections import deque
class LinkedList:
    def __init__(self, val):
        self.val = val
        self.next = None

    def add(self, val):
        if self.next == None:
            self.next = LinkedList(val)
        else:
            self.next.add(val)

    def __str__(self):
        return "({val})".format(val=self.val) + str(self.next)


class BinaryTree:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None


def findParent(root,childNodeValue):
    if root.val== childNodeValue:
        return
    if root is None:
        return
    else:
        queue=deque()
        queue.append(root)
        while queue:
            current_node=queue.popleft()
            if current_node.left is not None:
                if current_node.left.val==childNodeValue:
                    return current_node
            if current_node.right is not None:
                if current_node.right.val==childNodeValue:
                    return current_node
            if current_node.left is not None:
                if current_node.left.val!=childNodeValue:
                    if current_node.left is not None:
                        queue.append(current_node.left)
            if current_node.right is not None:
                if current_node.right.val!=childNodeValue:
                    if current_node.right is not None:
                        queue.append(current_node.right)

def depth(root):
    if root is None:
        return 0
    return max(depth(root.left),depth(root.right))+1
def level(root,nodeValue):
    if root.val==nodeValue:
        return 1
    current_node=findParent(root,nodeValue)
    return 1+level(root,current_node.val)


def custDict(tree):
    queue = deque()
    queue.append(tree)
    custDict = {}
    for i in range(depth(tree)):
        custDict[i+1]=list()
    while queue:
        current_node=queue.popleft()
        k=level(tree,current_node.val)
        if current_node not in custDict[k]:
            custDict[k].append(current_node)
        if current_node.left is not None:
            queue.append(current_node.left)
        if current_node.right is not None:
            queue.append(current_node.right)
    return custDict




def treeToLinkedList(tree, custDict={}, d=None):
    queue = deque()
    queue.append(tree)
    for i in range(d):
        custDict[i+1]=list()
    while queue:
        current_node=queue.popleft()
        k=level(tree,current_node.val)
        if current_node not in custDict[k]:
            custDict[k].append(current_node)
        if current_node.left is not None:
            queue.append(current_node.left)
        if current_node.right is not None:
            queue.append(current_node.right)
    for x in custDict:
        linkedlist=LinkedList(custDict[x][0].val)
        for y in custDict[x][1:]:
            linkedlist.add(y.val)
        print(linkedlist)







root=BinaryTree(5)
root.left=BinaryTree(3)
root.right=BinaryTree(7)
root.left.left=BinaryTree(2)
root.left.right=BinaryTree(4)
root.right.left=BinaryTree(6)
root.right.right=BinaryTree(8)

print(level(root,3))
print(level(root,7))
print(custDict(root))

treeToLinkedList(root,custDict={},d=depth(root))
