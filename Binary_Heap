class Heap(object):
    def __init__(self, size):
        self.size=size
        self.custom_list=(size+1)*[None]
        self.heapSize=0
        self.maxSize=size+1

def peekOfHeap(rootNode):             ##rootNode is not node..its just a name to distinguish between two different heaps...its still the list in itself
    if not(rootNode):
        return
    return rootNode.custom_list[1]

def sizeOfHeap(rootNode):
    if not(rootNode):
        return
    else:
        return rootNode.heapSize

def levelOrderTraversal(rootNode):
    if not(rootNode):
        return
    else:
        index=1
        for _ in range(rootNode.heapSize):
            print(rootNode.custom_list[index])
            index+=1

def heapifyTreeInsert(rootNode,index,heapType):
    parentIndex = int(index/2)
    if index<=1:
        return
    if heapType=="Min":
        if rootNode.custom_list[parentIndex]>rootNode.custom_list[index]:
            temp=rootNode.custom_list[index]
            rootNode.custom_list[index]=rootNode.custom_list[parentIndex]
            rootNode.custom_list[parentIndex]=temp
        heapifyTreeInsert(rootNode,parentIndex,heapType) ###...........O(logN)
    elif heapType=="Max":
        if rootNode.custom_list[index]>rootNode.custom_list[parentIndex]:
            temp=rootNode.custom_list[index]
            rootNode.custom_list[index] = rootNode.custom_list[parentIndex]
            rootNode.custom_list[parentIndex] = temp
        heapifyTreeInsert(rootNode, parentIndex, heapType)

def insertNode(rootNode,nodeValue,heapType):
    if rootNode.heapSize+1==rootNode.maxSize:
        return "The binary heap is full."
    rootNode.custom_list[rootNode.heapSize+1]=nodeValue
    rootNode.heapSize+=1
    heapifyTreeInsert(rootNode,rootNode.heapSize,heapType)             ##O(logN)

def heapifyTreeExtract(rootNode,nodeValue,heapType):
    if not rootNode:
        return
    else:
        if rootNode.heapSize+1<=rootNode.maxSize:
            deletion_index=rootNode.custom_list.index(nodeValue)
            temp=rootNode.custom_list[rootNode.heapSize]
            rootNode.custom_list[deletion_index]=temp
            rootNode.custom_list[rootNode.heapSize]=None
            rootNode.heapSize-=1
        heapifyTreeInsert(rootNode,rootNode.heapSize-1,heapType)

def deleteHeap(rootNode):
    rootNode.custom_list=None




new_binHeap = Heap(10)
print(new_binHeap.custom_list)
insertNode(new_binHeap,10,'Min')
insertNode(new_binHeap,5,'Min')
insertNode(new_binHeap,15,'Min')
insertNode(new_binHeap,2,'Min')
insertNode(new_binHeap,25,'Min')
insertNode(new_binHeap,3,'Min')
insertNode(new_binHeap,7,'Min')

levelOrderTraversal(new_binHeap)
print("....")
heapifyTreeExtract(new_binHeap,25,'Min')
levelOrderTraversal(new_binHeap)
print(".......h")
