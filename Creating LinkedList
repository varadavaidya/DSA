class Node:
    def __init__(self,value):
        self.value=value
        self.next=None

new_node=Node(10)
print(new_node)

class LinkedList: # empty linked list
    def __init__(self):
        self.head=None
        self.tail=None
        self.length=0

class LinkedList:                   ##linked list with one node
    def __init__(self,value):
        new_node=Node(value)
        self.head=new_node
        self.tail=new_node
        self.length=1

new_link_lst=LinkedList(10)
print(new_link_lst.tail.value)

class LinkedList:                           # adding one node to an empty List with only head and tail
    def __init__(self):
        self.head=None
        self.tail=None
        self.length=0

    def append(self,value):                 #appending at last
        new_node=Node(value)               #Node class used
        if self.head is None:
            self.head=new_node
            self.tail=new_node

        else:
            self.tail.next=new_node    #connection created between last node of LL to new node
            self.tail=new_node
        self.length += 1

    def prepend(self,value):             #prepend
        if self.head==None:
            self.append(value)
        else:
            new_node=Node(value)
            new_node.next=self.head
            self.head=new_node
        self.length+=1

    def insert(self,value,index):
        if index<0 or index>self.length:
            print("can't do")
        if index==0:
            self.prepend(value)
        else:
            new_node=Node(value)
            k=1
            temp_node1 = self.head
            temp_node2=temp_node1.next
            while k>=1 and k<index:
                temp_node1=temp_node1.next
                temp_node2=temp_node2.next
                k=k+1
            temp_node1.next=new_node
            new_node.next=temp_node2
            self.length+=1

    def search(self,element):
        temp_node=self.head
        if self.head.value==element:
            return True
        else:
            k=0
            while k>=0 and k<((self.length)-1):
                temp_node=temp_node.next
                if temp_node.value==element:
                    return True
                else:
                    pass
                k+=1

    def traverse(self):
        n=self.length
        temp_node=self.head
        for _ in range(n):
            print(temp_node.value)
            temp_node=temp_node.next

    def get(self,index):
        temp_node=self.head
        for _ in range(index):
            temp_node=temp_node.next
        return temp_node.value

    def set(self,value,index):
        temp_node=self.head
        for _ in range(index):
            temp_node=temp_node.next
        temp_node.value=value

    def pop(self):
        if self.tail==None:
            print("nothing to pop")
        temp_node=self.head
        for _ in range((self.length)-1):
            temp_node=temp_node.next
        temp_node.value = None
        self.tail = temp_node
        self.length -=1

    def remove(self,element):
        temp_node1=self.head
        temp_node2=temp_node1.next
        temp_node3=temp_node2.next
        for _ in range((self.length)-1):
            if temp_node2.value!=element:
                temp_node1=temp_node2
                temp_node2=temp_node1.next
                temp_node3=temp_node2.next
            else:
                temp_node1.next=temp_node3

    def delete(self):
        temp_node=self.head
        for _ in range(self.length):
            self.head=temp_node.next

    def __str__(self):
        temp_node=self.head
        result=''
        while temp_node is not None:
            result += str(temp_node.value)
            if temp_node.next is not None:
                result +=' --> '
            temp_node=temp_node.next
        return result

