class DisjointSet:
    def __init__(self,vertices):
        self.vertices=vertices
        self.parent={}
        for vertex in vertices:
            self.parent[vertex]=vertex
        self.rank=dict.fromkeys(vertices,0)

    def find(self,item):
        if self.parent[item]==item:
            return item
        else:
            return self.parent[self.parent[item]]

    def union(self,x,y):
        xroot=self.find(x)
        yroot=self.find(y)
        if self.rank[xroot]<self.rank[yroot]:
            self.parent[xroot]=yroot
        elif self.rank[xroot]>self.rank[yroot]:
            self.parent[yroot]=xroot
        else:
            self.parent[yroot]=xroot
            self.rank[xroot]+=1

class Graph:
    def __init__(self,vertices):
        self.V=vertices
        self.graph=[]
        self.nodes=[]
        self.MST=[]

    def addEdge(self,s,d,w):
        self.graph.append([s,d,w])

    def addNode(self,value):
        self.nodes.append(value)

    def printSolution(self,s,d,w):
        for s,d,w in self.MST:
            print("%s - %s: %s" % (s,d,w))

    def Kruskal(self):
        i,e =0,0
        ds = DisjointSet(self.nodes)
        self.graph=sorted(self.graph,key=lambda item:item[2])
        while e<self.V-1:
            s,d,w=self.graph[i]
            i +=1
            x=ds.find(s)
            y=ds.find(d)
            if x!=y:
                e+=1
                self.MST.append([s,d,w])
                ds.union(x,y)

        self.printSolution(s,d,w)

graph=Graph(5)
graph.addNode("A")
graph.addNode("B")
graph.addNode("C")
graph.addNode("D")
graph.addNode("E")

graph.addEdge("A","B",5)
graph.addEdge("A","E",15)
graph.addEdge("A","C",13)

graph.addEdge("B","C",10)
graph.addEdge("B","D",8)
graph.addEdge("B","C",5)

graph.addEdge("C","E",20)
graph.addEdge("C","A",13)
graph.addEdge("C","B",10)
graph.addEdge("C","D",6)

graph.addEdge("D","B",8)
graph.addEdge("D","C",6)

graph.addEdge("E","A",15)
graph.addEdge("E","C",20)


graph.Kruskal()
